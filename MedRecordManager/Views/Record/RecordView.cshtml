@using Microsoft.AspNetCore.Identity
@inject UserManager<MedRecordManager.Models.UserRecord.ApplicationUser> UserManager
@model MedRecordManager.Models.SearchInputs
@{
    ViewData["Title"] = "Record Manager - Daily Review";


    var user = await UserManager.GetUserAsync(User);

    var roles = await UserManager.GetRolesAsync(user);
}

@section scripts{
    <script type="text/javascript">

        var dailyGrid;
        var flaggedGrid;
        var modifiedGrid;

        $(document).ready(function () {
            var type = $('#searchType').val();
            var flagManager = function (value, record, $cell, $displayEl, id, $grid) {
                var $flagModal = $('#flagModal');
                var $checkBox = $('<input type="checkbox">').prop('checked', record.isFlagged)
                    .attr({
                        'dataKey': id
                    });

                $checkBox.on('click', function (e) {
                    var mark = $(this).is(':checked');

                    $flagModal.attr({
                        'dataKey': id,
                        'flagged': mark
                    });
                    if (mark) {
                        $flagModal.find('.modal-body').children('p').html('This action will mark the current record for skipping the synchroniztion until it is unchecked.  Click Yes to go ahead, NO to cancel.')
                    }
                    else {
                        $flagModal.find('.modal-body').children('p').html('This action will re instate the current record for synchroniztion. Click Yes to go ahead, NO to cancel.')
                    }
                    $flagModal.modal({ backdrop: 'static', keyboard: false });

                });
                $displayEl.empty().append($checkBox);
            };
            var editManager = function (value, record, $cell, $displayEl, id, $grid) {
                var /*data = $grid.data(),    */
                    $detail = $('<button type="button"class="btn btn-info">Detail</button><span style="padding-right: 5px"/>').attr('data-key', id),
                    $edit = $('<button type="button"class="btn btn-warning">Edit</button>').attr('data-key', id),
                    $update = $('<button type="button"class="btn btn-success">Update</button><span style="padding-right: 5px"/>').attr('data-key', id).hide(),
                    $cancel = $('<button type="button"class="btn btn-default">Cancel</button>').attr('data-key', id).hide();


                $detail.on('click', function (e) {
                    addTab($(this).data('key'))
                });
                $edit.on('click', function (e) {
                    $grid.edit($(this).data('key'));
                    $edit.hide();
                    $detail.hide();
                    $update.show();
                    $cancel.show();
                });
                $update.on('click', function (e, id, record) {
                    $grid.update($(this).data('key'));
                    $edit.show();
                    $detail.show();
                    $update.hide();
                    $cancel.hide();
                });


                $cancel.on('click', function (e) {
                    $grid.cancel($(this).data('key'));
                    $edit.show();
                    $detail.show();
                    $update.hide();
                    $cancel.hide();
                });
                $displayEl.empty().append($detail).append($edit).append($update).append($cancel);
            };

            flaggedGrid = $('#flaggedVisitTable').grid({
                primaryKey: 'visitId',
                dataSource: '/Record/GetFlaggedVisit',
                columns: [
                    //{ field: 'pvRecordId', width:100, title: 'PV RecordId' },
                    { field: 'Flag', width: 50, renderer: flagManager },
                    { filed: 'visitId', hidden: true },
                    { field: 'patientName', Width: 300, title: 'Patient Name' },
                    { field: 'clinicName', Width: 150, title: 'Clinic Name',type: 'dropdown', editor: { dataSource: '/Record/GetClinics', valueField: 'id' }, editField: 'clinicName'},
                    { field: 'pvFinClass', minwidth: 100, title: 'Finacial Class' },
                    { field: 'payment', minwidth: 100, title: 'Payment $' },
                    { field: 'diagCode', width: 150, title: 'Diag Codes' },
                    { field: 'icdCodes', width: 150, title: 'Icd Codes' },
                    { field: 'procCodes', minwidth: 80, title: 'Proc Codes' },
                    { field: 'visitTime', minwidth: 80, title: 'Visit Date' },
                    { field: 'insuranceName', minwidth: 80, title: 'Carrier Name' },                  
                    { field: 'appliedRules', minWidth: 100, title: 'Applied Rules' },
                    { field: 'Actions', width: 300, renderer: editManager, align: 'center' }
                ],
                pager: { limit: 10, sizes: [2, 5, 10, 20] },
            });

            if (type == 'Daily') {
                dailyGrid = $('#visitTable').grid({
                    primaryKey: 'visitId',
                    inlineEditing: { mode: 'command', managementColumn: false },
                    dataSource: '/Record/LoadDaily',
                    columns: [
                        //{ field: 'pvRecordId', width:100, title: 'PV RecordId' },
                        { field: 'Flag', width: 50, renderer: flagManager },
                        { filed: 'visitId', hidden: true },
                        { field: 'patientName', width: 200, title: 'Patient Name', priority: 1, sortable: true, filterable: true, headerCssClass: 'gridHeader' },
                        { field: 'clinicName', width: 180, title: 'Clinic', priority: 2, sortable: true, type: 'dropdown', editor: clinicEditor},
                        { field: 'officeKey', width: 150, title: 'AMD OfficeKey', priority: 3, sortable: true, type: 'dropdown', editor: officeEditor },
                        { field: 'physicianName', width: 160, title: 'Physician' ,sortable: true},
                        { field: 'insuranceName', width: 140, title: 'Insurance',sortable: true},
                        { field: 'pvFinClass', width: 80, title: 'Class', sortable: true},
                        { field: 'payment', width: 80, title: 'Payment', /*renderer: function (value, record) {  value }*/ },
                        { field: 'procCodes', width: 80, title: 'Proc Codes' },
                        { field: 'visitTime', width: 80, title: 'Visit Date' , sortable: true},

                        { field: 'Actions', width: 200, renderer: editManager, align: 'center' }
                    ],
                    pager: { limit: 10, sizes: [2, 5, 10, 20] },
                    detailTemplate: '<div><table/></div>'
                });

                dailyGrid.on('detailExpand', function (e, $detailWrapper, id) {
                    $detailWrapper.find('table').grid({
                        params: { visitId: id },
                        dataSource: '/Record/Payer',
                        autoGenerateColumns: true
                    });
                });

                dailyGrid.on('detailCollapse', function (e, $detailWrapper, id) {
                    $detailWrapper.find('table').grid('destroy', true, true);
                });

                dailyGrid.on('rowDataChanged', function (e, id, record) {
                    var $alert = $('#visitGridAlert');
                    var data = $.extend(true, {}, record);

                    $.ajax({
                        url: '@Url.Action("UpdateVisit","Record")',
                        data: { record: data },
                        method: 'POST',
                        cache: false,
                        success: function (response) {
                            var caption;
                            if (response.success) {
                                $alert.addClass('alert alert-success')
                                caption = 'Sucessful! '
                            }
                            else {
                                $alert.addClass('alert alert-warning')
                                caption = 'Warning! '
                            }
                            $alert.children('.alert-content').empty();
                            $alert.children('.alert-content').append('<strong>' + caption + '</strong >' + response.message)
                        }
                    })
                        .fail(function () {
                            $('#visitGridAlert').addClass('alert alert-danger')
                            $alert.append(' <strong>Failed!</strong> ')
                        })
                        .done(function () {
                            $alert.fadeTo(4000, 500).slideUp(1000, function () {
                                $alert.slideUp(1000)
                            });
                        })
                });

                dailyGrid.on('pageChanging', function () {
                    dailyGrid.clear();
                });
            }
            else if (type == 'Callback') {
                dailyGrid = $('#visitTable').grid({
                    primaryKey: 'pvId',
                    inlineEditing: { mode: 'dblclick' },
                    dataSource: '/Record/LoadCallback',
                    uiLibrary: 'bootstrap',
                    columns: [
                        { field: 'pvId', hidden: true },
                        { field: 'patientName' },
                        { field: 'pvClinic' },
                        { field: 'visitDate' },
                        { field: 'pvPhone', title: 'Phone No.', editor: true },
                        { field: 'pvPhoneType', title: 'Type', editor: true },
                        { field: 'cellPhone', editor: true }
                    ],
                    pager: { limit: pagelimit, sizes: pagesize }
                });

            }
            else if (type = 'Imported') {
                dailyGrid = $('#visitTable').grid({
                    primaryKey: 'pvId',
                    dataSource: '/Record/LoadImported',
                    columns: [
                        { filed: 'visitId', hidden: true },
                        { field: 'patientName', width: 250, title: 'Patient Name', priority: 1, sortable: true},
                        { field: 'clinicName', width: 200, title: 'Clinic Name', priority: 2 , sortable: true},
                        { field: 'physicianName', width: 200, title: 'Physician Name' , sortable: true},
                        { field: 'insuranceName', width: 200, title: 'Insurance Name',sortable: true },
                        { field: 'visitTime', minWidth: 80, title: 'Visit Time' },
                        { field: 'importedDate', minWidth: 80, title: 'Imported Date' },
                        { field: 'chargeImported', minWidth: 80, title: 'Charge Imported' },
                        { field: 'patDocImported', minWidth: 80, title: 'Document All Imported' },
                         { field: 'patChartImported', minWidth: 80, title: 'Chart All Imported' }
                    ],
                    pager: { limit: 10, sizes: [2, 5, 10, 20] }
                });
            }

            modifiedGrid = $('#changeTable').grid({
                primaryKey: 'visitId',
                dataSource: '/Record/GetModifiedRecord',
                data: {
                    startDate: $('#startDate').val(),
                    endDate: $('#endDate').val()
                },
                autoGenerateColumns: true,
                pager: { limit: 10, sizes: [2, 5, 10, 20] },
            });

            patientGrid = $('#patientGrid').grid({
                primaryKey: 'PvPatientId',
                datasource: '/record/GetPatientDetail',
                uiLibrary: 'bootstrap',
            });

            payerGrid = $('#payerGrid').grid({
                primaryKey: 'PvPatientId',
                datasource: '/record/GetPatientDetail',
                uiLibrary: 'bootstrap',
            });

            guarantorGrid = $('#guarantorGrid').grid({
                primaryKey: 'PvPatientId',
                datasource: '/record/GetPatientDetail',
                uiLibrary: 'bootstrap',
            });


            $('#startDate').datepicker({
                uiLibrary: 'bootstrap'
            });

            $('#endDate').datepicker({
                uiLibrary: 'bootstrap'
            });

            $('#searchButton').on('click', function () {
                var type = $('#searchType').val();
                if ($('#officeKey').length) {
                    if ($('#officeKey').val().length == 0) {
                        $('#officeKey').closest('.form-group').addClass('has-error')
                    }
                    else {
                        $('#officeKey').closest('.form-group').removeClass('has-error')
                    }
                    
                }
                if ($('#startDate').val().length != 0) {
                    $('#startDate').closest('.form-group').removeClass('has-error')
                }
                else {
                    $('#startDate').closest('.form-group').addClass('has-error')
                }

                if ($('#endDate').val().length == 0) {
                    $('#endDate').closest('.form-group').addClass('has-error')
                }
                else {
                    $('#endDate').closest('.form-group').removeClass('has-error')
                }

                if ( $('#startDate').val().length != 0 && $('#endDate').val().length != 0) {
                    if (type === 'Daily' || type === 'Imported') {
                        var keys = [];
                        dailyGrid.clear();
                        if ($('#officeKey').length) {
                            if ($('#officeKey').val().length != 0) {
                           
                                $('#officeKey > Option:selected').each(function () {
                                    keys.push(this.value);
                                })                       
                            }
                           
                        }
                        dailyGrid.reload({ office: keys.join(','), startDate: $('#startDate').val(), endDate: $('#endDate').val() });
                    }
                

                    else if (type === 'Callback') {
                        dailyGrid.clear();
                        dailyGrid.reload({ office: $('#officeKey').val(), startDate: $('#startDate').val(), endDate: $('#endDate').val() });
                    }

                    $('.dataView').show();
                    $('.modified').hide();


                }
                else {
                    $('.dataView').hide();
                }
            });


            $('#btnNext').on('click', function () {
                $('.dataView').hide();
                $('.modified').show();
                modifiedGrid.clear();
                modifiedGrid.reload({ startDate: $('#startDate').val(), endDate: $('#endDate').val() })

            });

            $('#btnScrub').on('click', function () {
                var keys = [];
                if ($('#officeKey').length) {

                    $('#officeKey').val().length != 0
                     $('#officeKey > Option:selected').each(function () {
                        keys.push(this.value);
                    });
                }
                if ($('#startDate').val().length != 0 && $('#endDate').val().length != 0) {                                   
                    $.ajax({
                        url: '/Record/ScrubRecord',
                        data: {
                            officekey: keys.join(','),
                            startDate: $('#startDate').val(),
                            endDate: $('#endDate').val()
                        },
                        type: 'POST',
                        success: function (response) {
                            if (response.success) {
                                if (response.message.length > 0) {
                                    alert(response.message);
                                }
                                dailyGrid.clear();
                                dailyGrid.reload({ office: keys.join(','), startDate: $('#startDate').val(), endDate: $('#endDate').val() });
                                flaggedGrid.clear();
                                flaggedGrid.reload({ page: 1 });
                            }
                            if (response.success == false) {
                                alert(response.message);
                            }
                        }
                    });
                }

            });

            $('#btnRun').on('click', function () {
                var keys = [];
                $('#btnRun').attr('disabled', true);
                $('#officeKey > Option:selected').each(function () {
                        keys.push(this.value);
                    });
                $.ajax({
                    url: '/Record/RunBatch',
                    data: {
                        startDate: $('#startDate').val(),
                        endDate: $('#endDate').val(),
                        officeKey: keys.join(',')
                    },
                    type: 'POST',

                    success: function (response) {
                        $('#btnRun').attr('disabled', false);
                    },
                    dataType: 'json'
                })
            });

            $('#flagModal').on('click', '.btn-primary', function () {
                var id = $('#flagModal').attr('datakey');
                var mark = $('#flagModal').attr('flagged');
                $('#flagModal').removeAttr('dataKey');
                $('#flagModal').removeAttr('flagged');
                $('#flagModal').modal('hide');
                flagRecord(mark, id);
            });

            $('#flagModal').on('click', '.btn-secondary', function () {
                var id = $('#flagModal').attr('datakey');
                var mark = $('#flagModal').attr('flagged');
                $('#flagModal').removeAttr('dataKey');
                $('#flagModal').removeAttr('flagged');
                $('#flagModal').modal('hide');
                if (mark == 'false') {
                    $('input[dataKey=' + id + ']').prop('checked', true);
                }
                else {
                    $('input[dataKey=' + id + ']').prop('checked', false);
                }

            });


            $(document).on('click', '.closeTab', function () {
                var tabContentId = $(this).parent().attr("href");
                $(this).parent().parent().remove();
                $(tabContentId).remove();
                $('a[href$="#mainView"]').click();
            });

            function addTab(id) {
                if ($('#detail' + id).length == 0) {
                    $('.nav-tabs').find('li').last().after('<li><a data-toggle="tab" href="#detail' + id + '"><button type="button" class="close closeTab" aria-label="Close">&nbsp;&times;</button><b>Visit ' + id + '</b></a></li>');
                    $.ajax({
                        type: "GET",
                        data: {
                            visitId: id
                        },
                        url: "/Record/GetDetails",
                        cache: false,
                        success: function (response) {
                            $('.tab-content').append(response);
                            $(".nav-tabs li").children('a').last().click();
                        }
                    });
                }
                else {
                    $('a[href$="#detail' + id + '"]').click();
                }
            };

            function flagRecord(mark, id) {
                $.ajax({
                    type: 'POST',
                    data: {
                        visitId: id,
                        flag: mark
                    },
                    url: '/Record/FlagVisit',
                    cache: false,
                    success: function () {
                        flaggedGrid.reload({ page: 1 });

                    }
                }).done(function () {
                    if (mark == 'false') {
                        $('input[dataKey=' + id + ']').prop('checked', false);
                    }
                });
            };

            function filterImported(doc, chart) {
                dailyGrid.clear()
            }



            function officeEditor($editorContainer, value, record) {
                var select = $('<select><option value="' + value + '">' + value + '</option></select>');
                $editorContainer.append(select);
                select.select2({
                    width: '110px',
                    minimumResultsForSearch: -1,
                    ajax: {
                        url: '/Record/GetOfficeKeys',
                        data: function () {
                            return {
                                clinicId: record.clinicName
                            };
                        },
                        processResults: function (data) {
                            return {
                                results: $.map(data, function (item) {
                                    return {
                                        text: item.text,
                                        id: item.id,
                                        data: item
                                    };
                                })
                            };
                        }
                    }
                });
            }

            function clinicEditor($editorContainer, value) {
                var select = $('<select><option value="' + value + '">' + value + '</option></select>');
                $editorContainer.append(select);
                select.select2({
                    width: '140px',
                    minimumResultsForSearch: -1,
                    ajax: {
                        url: '/Record/GetClinics',
                        processResults: function (data) {
                            return {
                                results: $.map(data, function (item) {
                                    return {
                                        text: item.text,
                                        id: item.id,
                                        data: item
                                    };
                                })
                            };
                        }
                    }
                });
            }

        });

    </script>
}

<div class="modal fade" role="dialog" tabindex="-1" id="flagModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Attention</h4>
            </div>
            <div class="modal-body">
                <p></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary">Yes</button>
                <button type="button" class="btn btn-secondary">No</button>
            </div>
        </div>
    </div>
</div>

<h1>@Model.Type Record View</h1>
<ul class="nav nav-tabs" role="tablist">
    @{
        if (Model.Type == "Daily")
        {
            <li class="active"><a data-toggle="tab" href="#mainView"><b>Daily Review</b></a></li>

        }
        if (Model.Type == "Callback")
        {
            <li class="active"><a data-toggle="tab" href="#mainView"><b>Call Back</b></a></li>

        }

        if (Model.Type == "Imported")
        {
            <li class="active"><a data-toggle="tab" href="#mainView"><b>Imported View</b></a></li>
        }
    }
</ul>
<div class="tab-content" id="dataTab">
    <div class="tab-pane active" id="mainView">
        <input type="hidden" asp-for="Type" id="searchType" />
        <div class="row top-buffer">
            <div class="col-md-12">
                <div class="box box-widget">
                    <div class="box-header with-border">
                        <h3 class="box-title">Search</h3>
                    </div>
                    <div class="box-body">
                        @{if (user.Company == "SINAI")
                            {
                                <div class="col-md-3">
                                    <div class="form-group">
                                        <label asp-for="OfficeKey" class="control-label"> Select Key(s)</label>
                                        <select class="form-control" asp-for="OfficeKey" , asp-items="@Model.OfficeKeys" id="officeKey" multiple></select>
                                    </div>
                                </div>
                            }

                        }

                        <div class="col-md-3">
                            <div class="form-group">
                                <label asp-for="StartDate" class="control-label">Visit Start Date</label>
                                <input class="form-control date" id="startDate" type="text" value="@DateTime.Today.AddDays(-1).ToShortDateString()" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label asp-for="EndDate" class="control-label">Visit End Date</label>
                                <input class="form-control date" id="endDate" type="text" value="@DateTime.Today.ToShortDateString()" />
                            </div>

                        </div>

                        <div class="col-md-1">
                            <div class="form-group">
                                <div class="control-group">
                                    <div style="margin-top: 24px;">
                                        <input type="button" value="Search" class="btn btn-primary" id="searchButton" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        @if (Model.Type == "Callback")
                        {
                            <div class="row">
                                <div class="col-sm-3">
                                    <div class="form-group">
                                        <label asp-for="Clinic" class="control-label">Select Clinic(s)</label>
                                        <select class="form-control" asp-for="Clinic" , asp-items="@Model.Clinics" id="officeKey" multiple></select>
                                    </div>
                                </div>
                            </div>

                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row dataView" style="display:none">
            <div class="col-md-12">
                <div class="alert-dismissible fade" role="alert" id="visitGridAlert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <div class="alert-content"></div>
                </div>
                <div id="Results">
                    <div class="box box-danger">
                        <div class="box-header with-border">
                            <h3 class="box-title">Daily Visit Records</h3>
                        </div>
                        <div class="box-body">
                            @if (Model.Type == "Imported")
                            {
                                <div class="row">
                                    <div class="col-xs-3">
                                        <div class="checkbox chkfilter">
                                            <label>
                                                <input type="checkbox" value="">
                                                <span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span>
                                                Show Unimported Chart Only
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-xs-3">
                                        <div class="checkbox chkfilter">
                                            <label>
                                                <input type="checkbox" value="">
                                                <span class="cr"><i class="cr-icon glyphicon glyphicon-ok"></i></span>
                                                Show Unimported Document Only
                                            </label>
                                        </div>
                                    </div>

                                </div>
                            }

                            <div class="row" style="margin-top: 10px">
                                <div class="col-xs-12">
                                    <table id="visitTable" class="table table-striped"></table>
                                </div>
                            </div>
                        </div>
                        <div class="box-footer">
                            <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                                @if (Model.Type == "Daily")
                                {
                                    <button class="btn btn-success pull-right" id="btnNext">Next</button>
                                    if (Model.Type == "Daily")
                                    {
                                        <button class="btn btn-primary pull-right" id="btnScrub">Scrub</button>
                                    }
                                }
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>

        <div class="row modified" style="display:none">
            <div class="col-md-12">
                <div id="Results">
                    <div class="box box-danger">
                        <div class="box-header with-border">
                            <h3 class="box-title">Modfied Records</h3>
                        </div>
                        <div class="box-body">
                            <table id="changeTable" class="table table-striped"></table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row modified top-buffer" style="display:none">
            <div class="col-sm-1 col-lg-offset-11 " style="text-align: left">
                <button class="btn btn-success text-right" id="btnRun">run</button>
            </div>
        </div>


        <div class="row top-buffer">
            <div class="col-md-12">
                <div class="box box-warning">
                    <div class="box-header with-border">
                        <h3 class="box-title">Flagged Visit Records</h3>
                    </div>
                    <div class="box-body">
                        <div class="table-responsive">
                            <table id="flaggedVisitTable" class="table table-striped"></table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


</div>
